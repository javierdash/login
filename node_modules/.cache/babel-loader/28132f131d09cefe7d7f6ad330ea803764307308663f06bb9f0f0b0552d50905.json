{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\nvar swal = _interopDefault(require('sweetalert'));\nvar index = async function () {\n  const newOptions = await getOptions(...arguments);\n  return swal(newOptions);\n};\nconst bindActions = swalInstance => {\n  for (const method in swal) {\n    swalInstance[method] = swal[method];\n  }\n};\nconst getOptions = async (params, _ref) => {\n  let {\n    identifier,\n    transformer\n  } = _ref;\n  let newOptions = await transformParams(params, identifier, transformer);\n  newOptions = Object.assign({}, parseTextParams(params), newOptions);\n  const lastParam = params[params.length - 1];\n\n  /*\n   * So that we don't lose other specified options\n   * such as buttons... etc.\n   */\n  if (isOptionsParam(lastParam, identifier)) {\n    newOptions = Object.assign({}, lastParam, newOptions);\n  }\n  return newOptions;\n};\nconst parseTextParams = params => {\n  const options = {};\n  const isString = param => typeof param === \"string\";\n  if (isString(params[0]) && !isString(params[1])) {\n    options.text = params[0];\n  }\n  if (isString(params[1])) {\n    options.title = params[0];\n    options.text = params[1];\n  }\n  if (isString(params[2])) {\n    options.icon = params[2];\n  }\n  return options;\n};\n\n// Return true if param is a SwalOptions object\nconst isOptionsParam = (param, isTransformable) => param.constructor === Object && !isTransformable(param);\n\n/*\n * @params: (SwalParams, Function, Function, boolean)\n * @returns: SwalOptions\n */\nconst transformParams = async (params, isTransformable, transformer) => {\n  // Check if the transform returns a DOM synchronously\n  // or if it is a promise:\n  const isAsync = transformer() instanceof Promise;\n\n  /*\n   * Example:\n   *   swal(<div>Hello!</div>);\n   */\n  const transformSingleParam = async () => {\n    const el = params[0];\n    if (!isTransformable(el)) return;\n    const newContent = await transformEl(el, transformer, isAsync);\n    return {\n      content: newContent\n    };\n  };\n\n  /*\n   * Example:\n   *   swal(\"Hi\", { \n   *     content: <div>Hello!</div> \n   *   })\n   */\n  const transformContentOption = async () => {\n    const lastParamIndex = params.length - 1;\n    const lastParam = params[lastParamIndex];\n    if (!lastParam || !lastParam.content) return;\n    let {\n      content,\n      button\n    } = lastParam;\n    if (isTransformable(content)) {\n      content = await transformEl(content, transformer, isAsync);\n    }\n\n    /* TODO?\n    if (isTransformable(button)) {\n      button = await transformEl(button, transformer, isAsync);\n    }\n    */\n\n    return {\n      content\n      //button,\n    };\n  };\n\n  /*\n   * Only transform the params that can \n   * have a DOM node as their value\n   */\n  const newOpts = await Promise.all([transformSingleParam(), transformContentOption()]);\n  return Object.assign({}, ...newOpts);\n};\n\n// Transform a single option\nconst transformEl = async (el, transformer, isAsync) => {\n  return isAsync ? await transformer(el) : transformer(el);\n};\nexports['default'] = index;\nexports.bindActions = bindActions;","map":{"version":3,"names":["Object","defineProperty","exports","value","_interopDefault","ex","swal","require","index","newOptions","getOptions","bindActions","swalInstance","method","params","identifier","transformer","transformParams","assign","parseTextParams","lastParam","length","isOptionsParam","options","isString","param","text","title","icon","isTransformable","constructor","isAsync","Promise","transformSingleParam","el","newContent","transformEl","content","transformContentOption","lastParamIndex","button","newOpts","all"],"sources":["/Users/Lucy/Desktop/loginjavi/node_modules/@sweetalert/transformer/dist/transformer.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar swal = _interopDefault(require('sweetalert'));\n\nvar index = async (...args) => {\n  const newOptions = await getOptions(...args);\n\n  return swal(newOptions);\n};\n\nconst bindActions = (swalInstance) => {\n  for (const method in swal) {\n    swalInstance[method] = swal[method];\n  }\n};\n\nconst getOptions = async (params, {\n  identifier,\n  transformer,\n}) => {\n\n  let newOptions = await transformParams(\n    params, \n    identifier, \n    transformer, \n  );\n\n  newOptions = Object.assign({}, parseTextParams(params), newOptions);\n\n  const lastParam = params[params.length - 1];\n\n  /*\n   * So that we don't lose other specified options\n   * such as buttons... etc.\n   */\n  if (isOptionsParam(lastParam, identifier)) {\n    newOptions = Object.assign({}, lastParam, newOptions);\n  }\n\n  return newOptions;\n};\n\nconst parseTextParams = params => {\n  const options = {};\n\n  const isString = param => typeof param === \"string\";\n\n  if (isString(params[0]) && !isString(params[1])) {\n    options.text = params[0];\n  }\n\n  if (isString(params[1])) {\n    options.title = params[0];\n    options.text = params[1];\n  }\n\n  if (isString(params[2])) {\n    options.icon = params[2];\n  }\n\n  return options;\n};\n\n// Return true if param is a SwalOptions object\nconst isOptionsParam = (param, isTransformable) => (\n  (param.constructor === Object) && \n  (!isTransformable(param))\n);\n\n/*\n * @params: (SwalParams, Function, Function, boolean)\n * @returns: SwalOptions\n */\nconst transformParams = async (params, isTransformable, transformer) => {\n\n  // Check if the transform returns a DOM synchronously\n  // or if it is a promise:\n  const isAsync = transformer() instanceof Promise;\n\n  /*\n   * Example:\n   *   swal(<div>Hello!</div>);\n   */\n  const transformSingleParam = async () => {\n    const el = params[0];\n\n    if (!isTransformable(el)) return;\n\n    const newContent = await transformEl(el, transformer, isAsync);\n\n    return {\n      content: newContent,\n    };\n  };\n\n  /*\n   * Example:\n   *   swal(\"Hi\", { \n   *     content: <div>Hello!</div> \n   *   })\n   */\n  const transformContentOption = async () => {\n    const lastParamIndex = (params.length - 1);\n    const lastParam = params[lastParamIndex];\n\n    if (!lastParam || !lastParam.content) return;\n\n    let { content, button } = lastParam;\n\n    if (isTransformable(content)) {\n      content = await transformEl(content, transformer, isAsync);\n    }\n\n    /* TODO?\n    if (isTransformable(button)) {\n      button = await transformEl(button, transformer, isAsync);\n    }\n    */\n\n    return {\n      content,\n      //button,\n    };\n  };\n\n  /*\n   * Only transform the params that can \n   * have a DOM node as their value\n   */\n  const newOpts = await Promise.all([\n    transformSingleParam(),\n    transformContentOption(),\n  ]);\n\n  return Object.assign({}, ...newOpts);\n};\n\n// Transform a single option\nconst transformEl = async (el, transformer, isAsync) => {\n  return (isAsync) ? await transformer(el) : transformer(el);\n};\n\nexports['default'] = index;\nexports.bindActions = bindActions;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}